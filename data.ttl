#  Our instance namespace:
@prefix ex: <http://moschetti.org/buzz#> .

#  The namespace for predicates, classes, and properties bespoke
#  to my environment.  The ami: namespace is off-limits and it is
#  always a good idea to separate class and property defs from
#  actual instances of same.
@prefix exr: <http://moschetti.org/datarisk#> .
@prefix exc: <http://moschetti.org/compliance#> .

#  The foundation AMI namespace:
@prefix ami: <http://moschetti.org/ami#> .

@prefix sh: <http://www.w3.org/ns/shacl#> .

@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

#
#  Actors can be real people or processes.
#  Processess do not have first and last names and such so we heavily depend on
#  the rdfs:label as the catch-all.
#
#  TBD:  Maybe Actors also need Item to pick up owner, steward, etc...
#

ex:actor1 a ami:Actor;
    rdfs:label "Steve Austin" ;
    ami:salary   "10.09"^^xsd:decimal ;	
    ami:DID "A123" ;
    ami:firstname "Steve" ;
    ami:lastname "Austin" .
    

ex:actor2 a ami:Actor;
    rdfs:label "Dave Spector" ;
    ami:DID "A456" ;
    ami:firstname "Dave" ;
    ami:lastname "Spector" .


ex:actorSys a ami:Actor;
    rdfs:label "System Daemon 7" ;
    ami:DID "S7" .

ex:actor7 a ami:Actor;
    rdfs:label "Linda Shaw" ;
    ami:DID "A86" ;
    ami:firstname "Linda" ;
    ami:lastname "Shaw" .

ex:actor9 a ami:Actor;
    rdfs:label "Druce Vertes" ;
    ami:DID "A999" ;
    ami:firstname "Druce" ;
    ami:lastname "Vertes" .    

ex:actor10 a ami:Actor;
    rdfs:label "Jane Doe" ;
    ami:DID "B87" ;
    ami:firstname "Jane" ;
    ami:lastname "Doe" .

ex:actor44 a ami:Actor;
    rdfs:label "Marsha Brady" ;
    ami:DID "X0098" ;
    ami:firstname "Marsha" ;
    ami:lastname "Brady" .

ex:actor441 a ami:Actor;
    rdfs:label "Jan Brady" ;
    ami:DID "X0298" ;
    ami:firstname "Jan" ;
    ami:lastname "Brady" .

ex:oraclecorp	    a ami:Vendor ;
		    ami:owner ex:actor44 ;
		    ami:LEI "C003" ;
		    rdfs:label "Oracle Corp" ;
		    rdfs:comment "The spawn of Larry Elison" .		    

ex:mscorp	    a ami:Vendor ;
		    ami:owner ex:actor44 ;
		    ami:LEI "C002" ;
		    rdfs:label "Microsoft Corp" ;
		    rdfs:comment "The spawn of Bill Gates" .

ex:internal	    a ami:Vendor ;
		    ami:owner ex:actor44 ;
		    rdfs:label "*internal development*" ;
		    rdfs:comment "All internal produced software" .


ex:mtech	    a ami:Vendor ;
		    ami:owner ex:actor44 ;
		    ami:LEI "C765" ;
		    rdfs:label "Moschetti LLC" ;
		    rdfs:comment "The spawn of Buzz" .
		    
ex:oss		    a ami:Vendor ;
		    ami:owner ex:actor441 ;
		    rdfs:label "open source" ;
		    rdfs:comment "Unspecified open source code" .
		    
ex:mongocorp	    a ami:Vendor ;
		    ami:owner ex:actor441 ;
		    ami:LEI "C265" ;
		    rdfs:label "MongoDB Inc" ;
		    rdfs:comment "The spawn of Dwight and Eliot" .
		    

ex:program1   a ami:Software ;
	      rdfs:label "report server";
	      ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];	      
	      ami:swtype	"service" ;
	      ami:implements	ex:service1 ;
	      ami:linksWith	ex:lib1 ;
	      ami:slang "java" ;
	      ami:linksWith	ex:lib77 .

ex:program3   a ami:Software ;
	      rdfs:label "risk calculator";
	      ami:swtype	"service" ;	      
	      rdfs:comment """
Calculates credit risk for instrument types A and B.
""" ;
	      ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];	      
	      ami:slang "java" ;
	      ami:implements	ex:service1 ;
	      ami:linksWith	ex:lib1 ;
	      ami:linksWith	ex:lib77 .

    
ex:software1 a ami:Software;
    rdfs:label "Oracle";
    rdfs:comment """
The Oracle database engine.
""";    
	#  Ah....  Just like Properties have 1 or more classes,
	#  Software can implement one or more Components!
	#  Here we are saying Oracle is used as the component
	#  for two different DBs:
	ami:implements	ex:db1 ;
	ami:implements	ex:db2 ;

      ami:swtype	"service" ;
      ami:vendor ex:oraclecorp ;

      ami:version [ a ami:Version;
          ami:major 12; ami:minor 0;
	  ami:released "2018-01-01T00:00:00Z"^^xsd:dateTime ;      
	  ami:bintype "arm64"; ami:platform "macOS"
      ];

    ami:EOL "2023-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;    
    ami:owner ex:actor1 ;
    ami:steward ex:actor1 .

ex:mdbx a ami:Software;
    rdfs:label "MongoDB";
    rdfs:comment """
The MongoDB database engine.
""";    
	ami:implements	ex:db3 ;

     ami:slang "c++" ;
      ami:vendor ex:mongocorp ;
    ami:version [ a ami:Version;
        ami:major 7; ami:minor 0;
	ami:released "2022-01-01T00:00:00Z"^^xsd:dateTime ;	
        ami:bintype "arm64"; ami:platform "macOS"
    ];
    ami:EOL "2025-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    
    ami:swtype	"service" ;    
    ami:owner ex:actor1 ;
    ami:steward ex:actor1 .    

ex:software2 a ami:Software;
    rdfs:label "java";
    ami:vendor ex:oraclecorp ;
    ami:version [ a ami:Version; ami:major 17; ami:minor 0; ami:patch 11;
      		  ami:released "2021-01-01T00:00:00Z"^^xsd:dateTime ;          
                  ami:bintype "arm64"; ami:platform "macOS" ];
    ami:EOL "2028-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
      ami:swtype	"exec" ;
      ami:owner ex:actor1 ;
    ami:steward ex:actor1.

ex:software22 a ami:Software;
    rdfs:label "java";
    ami:vendor ex:oraclecorp ;
      ami:swtype	"exec" ;    
    ami:version [ a ami:Version; ami:major 8; ami:minor 2; ami:patch 3;
      		  ami:released "2006-01-01T00:00:00Z"^^xsd:dateTime ;
                  ami:bintype "x86_64"; ami:platform "ubuntu" ];
    ami:EOL "2020-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    ami:owner ex:actor1 ;
    ami:steward ex:actor1.    


ex:software3 a ami:Software;
    rdfs:label "susynct";
    ami:vendor ex:mtech ;
      ami:swtype	"app" ;    
    ami:version [ a ami:Version;
         ami:major 1; ami:minor 0;
	 ami:released "2021-01-01T00:00:00Z"^^xsd:dateTime ;	 
	 ami:bintype "python"
	 ];
    ami:EOL "2027-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;

#    ami:corn "{\"key\": [\"foo\",12, {\"$numberDecimal\": \"12.09\"} ] }"^^ex:json  ;
     ami:slang "python" ;
     ami:owner ex:actor2 ;
    ami:steward ex:actor2 .


ex:software4 a ami:Software;
    rdfs:label "AMI";
      ami:swtype	"app" ;        
    ami:vendor ex:mtech ;
    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "python" ];
    ami:EOL "2026-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    ami:steward ex:actor2 ;
    ami:owner ex:actor2 .    

ex:lib1	a		ami:Software ;
	rdfs:label "google-guava";
	rdfs:comment """
Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, primitives, strings, and more.
""" ;
	ami:version [ a ami:Version; ami:major 7; ami:minor 6; ami:bintype "jar" ];	
      ami:swtype	"lib" ;    
      ami:steward ex:actor2 ;
	ami:owner ex:actor2 ;
      ami:slang "java" ;
	ami:vendor	ex:oss ;
	ami:EOL		"2024-08-02T14:00:57.478Z"^^xsd:dateTime .

    
ex:lib2	a		ami:Software ;
	rdfs:label "common-collections";
	ami:version [ a ami:Version; ami:major 22; ami:minor 1; ami:bintype "jar" ];
      ami:swtype	"lib" ;
      ami:steward ex:actor2 ;
	ami:owner ex:actor2 ;
      ami:slang "java" ;	
	ami:vendor	ex:oss ;
        ami:linksWith	ex:lib4 ;	
	ami:EOL		"2026-08-02T14:00:57.478Z"^^xsd:dateTime .

ex:lib3	a		ami:Software ;
	ami:version [ a ami:Version;
		    ami:major 1; ami:minor 0; ami:patch 0;
		    ami:bintype "jar" ;
		    ami:released "2007-01-01T00:00:00Z"^^xsd:dateTime ;	 		    
		    ];
		    
	rdfs:label "log4j";
	rdfs:comment "Extremely popular logging framework for Java" ;	
      ami:swtype	"lib" ;
      ami:steward ex:actor2 ;
	ami:owner ex:actor2 ;		
      ami:slang "java" ;
      ami:vendor	ex:oss ;
	ami:EOL		"2026-02-01T12:00:00.000Z"^^xsd:dateTime .

ex:lib4	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 2; ami:minor 8; ami:bintype "jar" ];
	rdfs:label "log4j";
	rdfs:comment "Extremely popular logging framework for Java" ;		
      ami:swtype	"lib" ;
      ami:steward ex:actor9 ;
	ami:owner ex:actor9 ;
      ami:slang "java" ;	
	ami:vendor	ex:oss ;
	ami:EOL		"2027-02-01T12:00:00.000Z"^^xsd:dateTime .

ex:lib77	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 5; ami:minor 7; ami:bintype "jar" ];
	rdfs:label "jackson";
	rdfs:comment "Extremely popular XML parser for Java" ;		
      ami:swtype	"lib" ;
      ami:owner ex:actor9 ;
	ami:steward ex:actor9 ;	
      ami:slang "java" ;
      ami:linksWith	ex:lib88 ;
	ami:EOL		"2027-02-01T12:00:00.000Z"^^xsd:dateTime .	

ex:lib88	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 2; ami:minor 2; ami:bintype "jar" ];
	rdfs:label "jackson-bind";
      ami:swtype	"lib" ;
      ami:owner ex:actor9 ;
      ami:slang "java" ;
      ami:steward ex:actor9 ;		
	ami:linksWith	ex:libMongo1 .

ex:libMongo1	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 4; ami:minor 9; ami:bintype "jar" ];
	rdfs:label "mongodb client SDK";
      ami:swtype	"lib" ;
      ami:owner ex:actor9 ;
      ami:steward ex:actor9 ;		
      ami:slang "java" ;
	ami:vendor	ex:mongocorp ;		
	rdfs:comment """
The MongoDB Java client side SDK.
""" .    		

ex:libpg1	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 16; ami:minor 0; ami:bintype "jar" ];
	rdfs:label "postgres client SDK";
      ami:swtype	"lib" ;    	
	ami:owner ex:actor9 ;
	ami:steward ex:actor9 ;
      ami:slang "java" ;
	ami:vendor	ex:oss ;		
	rdfs:comment """
The Postgres Java client side SDK.
""" .

ex:jpg4	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];
	rdfs:label "JPEG SDK";
      ami:swtype	"lib" ;    	
	ami:owner ex:actor9 ;
	ami:steward ex:actor9 ;		
      ami:slang "java" ;	
	ami:vendor	ex:oss ;		
	rdfs:comment """
A JPG/JPEG graphics generation library.
""" .    		

# ex:sw001	a		ami:Software ;
# 		ami:linksWith	ex:sw003 .

# ex:sw002	a		ami:Software ;
# 		ami:linksWith	ex:sw003 .

# ex:sw003	a		ami:Software ;
# 		ami:linksWith	ex:sw004 , ex:sw006 .

# ex:sw004	a		ami:Software ;
# 		ami:linksWith	ex:sw005 .

# ex:sw005	a		ami:Software ;

# ex:sw006	a		ami:Software ;


ex:sw001	ex:linksWith	ex:sw003 .
ex:sw002	ex:linksWith	ex:sw003 .
ex:sw003	ex:linksWith	ex:sw004 , ex:sw006 .
ex:sw004	ex:linksWith	ex:sw005 .




ex:vm1	a		ami:Hardware ;
	ami:steward ex:actor7 ;
	ami:owner ex:actor7 ;	
	ami:vendor	ex:mscorp ;
	ami:vmtype	"Standard_D2" .

#
#  Components tie together as a logical representation of a system
#

ex:myApp     a    ami:Component ;
	     	ami:owner ex:actor1 ;
		ami:steward ex:actor1 ;
		rdfs:label "myApp" ;
		rdfs:comment """
myApp is used by the risk department to do fancy things.""" ;
	     ami:connectsTo    ex:service1 .
	     
ex:myApp2    a    ami:Component ;
	      	ami:owner ex:actor1 ;
	      	ami:steward ex:actor1 ;
		rdfs:label "myApp2" ;
		rdfs:comment """
myApp2 blends frogs and pencil eraser dust into a delicacy.""" ;		
	     ami:connectsTo    ex:service7 .


ex:service1	a    ami:Component ;
	     	ami:owner ex:actor1 ;
	     	ami:steward ex:actor1 ;
		rdfs:label "risk service" ;
		rdfs:comment """
The risk service takes in requests to calculate things and returns the
results.  It uses live market data.""" ;
		
		ami:listensFor	[
		  ami:protocol 	ami:https ;
		  ami:auth 	ami:basic ;		
		  ami:mep    [
		        a ami:MEP ;
			ami:shapeIn  ex:shape1 ;
			ami:shapeOut ex:myShape_003 ;			
			] ;
		  ami:mep    [
		        a ami:MEP ;		  
			ami:shapeIn  ex:shape3 ;
			ami:shapeOut ex:shape4 ;			
			] ;
		] ;
		ami:connectsTo  ex:service2 .

ex:service7	a    ami:Component ;
	     	ami:owner ex:actor9 ;
	     	ami:steward ex:actor9 ;		
		ami:connectsTo    ex:db2 ;
		ami:listensFor	[
		  ami:mep    [
		        a ami:MEP ;		  
			ami:shapeIn  ex:myShape_001 ;
			ami:shapeOut ex:shape2 ;			
			]
		] .


#ex:service1  ami:connectsTo    ex:service2 .

ex:service2  a    ami:Component ;
	     	ami:owner ex:actor1 ;
	     	ami:steward ex:actor1 ;
		rdfs:label "instrument data service" ;
		rdfs:comment """
The instrument data service takes CUSIP, SEDOL, ISIN, BB, and GCID keys
and returns richly structured data.""" ;		
		ami:connectsTo    ex:service3 ;
		ami:connectsTo    ex:db1 ;
		ami:connectsTo    ex:db3 .		

ex:service3  a    ami:Component ;
	     	ami:owner ex:actor1 ;
	     	ami:steward ex:actor1 ;
		rdfs:label "structured products data service" ;
		rdfs:comment """
The structured products service takes GCID keys
and returns richly structured data for exotic structures.""" ;				
	     ami:connectsTo    ex:db2 .

ex:db1	       a    ami:Component ;
	     	ami:owner ex:actor7 ;
	     	ami:steward ex:actor7 ;
		rdfs:label "cash instrument database" ;
		rdfs:comment """
A database that holds cash instrument data like equities and bonds.""" .


ex:db2	       a    ami:Component ;
	     	ami:owner ex:actor7 ;
	     	ami:steward ex:actor7 ;
		rdfs:label "exotics database" ;

		#  Ah...  For databases we don't use a MEP because the
		#  inbound is too wide open -- but we CAN expose
		#  tables and collections as output!
		ami:listensFor	[
		  ami:protocol 	ami:proprietary ;
		  ami:auth 	ami:basic ;		
		  ami:shapeOut  ex:coll1, ex:coll2 ;
		] ;
			
		rdfs:comment """
A database optimized for storing richly structured data.""" .




ex:db3	       a    ami:Component ;
	     	ami:owner ex:actor7 ;
	     	ami:steward ex:actor7 ;
		rdfs:label "portfolio database" ;
		rdfs:comment """
Global repo of position data.""" .


ex:db4	       a    ami:Component ;
	     	ami:owner ex:actor7 ;
	     	ami:steward ex:actor7 ;
		rdfs:label "compliance limits database" ;
		rdfs:comment """
Tracks current and historic thresholds and setting used to drive risk systems.""" .



ex:otherApp  a    ami:Component ;
	     ami:connectsTo	 ex:serviceX .
ex:serviceX  a    ami:Component ;
	     ami:connectsTo    ex:db2 .




ex:program2   a ami:Software ;
		ami:steward ex:actor9 ;
		ami:owner ex:actor9 ;
	ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];
      ami:swtype	"service" ;    	
	      rdfs:label "graphics server";
	      ami:implements	ex:service1 ;
	      ami:linksWith	ex:lib2 ;
	      rdfs:comment """	      
A web service to generate a variety of line, bar, and pie graphs in JPG, PNG, or
PDF formats.  The purpose is to free programs from the sometimes complex and
burdensome task of importing or linking with a multitude of graphics generation
libraries, at the expense of performance due to data transmission over the network.
""" .


ex:foosvr   a ami:Software ;
	      rdfs:label "foo server";
      ami:swtype	"service" ;    		      
	      ami:implements	ex:service3 ;
	      ami:linksWith	ex:lib3 .	      


#
#   SYSTEMS
#
ex:system_001	a	ami:System ;
		ami:owner ex:actor9 ;
		ami:steward ex:actor9 ;
		rdfs:label "Glue System";
			ami:dept	"ABC" ;
		ami:components  ex:myApp, ex:myApp2 ;
		rdfs:comment """
This system computes amount of glue needed to bind things together.
""" .    		

ex:system_002	a	ami:System ;
		rdfs:label "Bond System";
		ami:owner ex:actor9 ;
		ami:steward ex:actor9 ;
		ami:dept	"ABC" ;
		ami:components  ex:myApp, ex:myApp2 ;
		rdfs:comment """
This system does almost the same thing as ex:system_001.
""" .    				

ex:system_003	a	ami:System ;
		rdfs:label "Vacation System";
		ami:owner ex:actor10 ;
		ami:steward ex:actor10 ;
		ami:macrotype "mainframe" ;
		ami:dept	"HR" ;
		ami:components  ex:otherApp ;
		rdfs:comment """
A vacation tracker system.
""" .    				


#
#  Instances are actual running things:
#

ex:foosvr_001	a	ami:Instance ;
		ami:program	     ex:foosvr ;
		ami:pid		     73645 ;
		ami:host	     "machine1" .



ex:myShape_001 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;

    rdfs:label  "instrument" ;
    rdfs:comment  """
Describes a polymorphic instrument shape.
""" ;

    exc:bcbs239 [ a exc:Bcbs239; exc:attested_by ex:actor1 ] ;
    
    sh:property [
        sh:path ex:amt ;
        sh:datatype xsd:integer ;
    ] ;
    
    sh:property [
        sh:path ex:recentReviews ;
        sh:node [
            a sh:NodeShape ;
            sh:property [
                sh:path ex:text ;
                sh:datatype xsd:string ;
            ] ;
            sh:property [
                sh:path ex:reviewerName ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [
                        sh:path ex:first ;
                        sh:datatype xsd:string ;
			ex:sensitivity  2  ;
		    ] ;
                    sh:property [
                        sh:path ex:last ;
                        sh:datatype xsd:string ;
                    ] ;
                ] ;
            ] ;
            sh:property [
                sh:path ex:reviewerID ;
                sh:datatype xsd:string ;
                sh:pattern "^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}$" ;  # Email format pattern
            ] ;
            sh:property [
                sh:path ex:reviewerPhone ;
                sh:datatype xsd:string ;
                sh:pattern "^(\\+\\d{1,3}[- ]?)?\\d{10}$" ;  # Simple phone number pattern
            ] ;
            sh:property [
                sh:path ex:reviewDate ;
                sh:datatype xsd:dateTime ;
		rdfs:comment  "date of review submission maybe not actual review" ;
            ] ;
        ] ;
    ] .


ex:myShape_002 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;

    rdfs:label  "user info" ;
    rdfs:comment  """
Digital ID plus SSN.
""" ;

    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];
    
    sh:property [
        sh:path ex:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path ex:SSN ;
        sh:datatype xsd:string ;
    ] .


ex:coll1 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;

    rdfs:label  "defaults" ;
    rdfs:comment  """
Defaults table.
""" ;

    sh:property [
        sh:path ex:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path ex:updated ;
        sh:datatype xsd:dateTime ;
    ] .


ex:coll2 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;

    rdfs:label  "results" ;
    rdfs:comment  """
Results table holding various things that were calculated.
""" ;

    sh:property [
        sh:path ex:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path ex:value ;
        sh:datatype xsd:string ;
	rdfs:comment  """
Value is stored as string due to legacy issues with floating point precision.""" ;
    ] .




ex:myShape_003 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;    
    rdfs:label  "boring" ;
    rdfs:comment  """
A boring shape.
""" ;
    
    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];
    
    sh:property [
        sh:path ex:corn ;
        sh:datatype xsd:string ;
	ex:sensitivity 3
    ] .


ex:myShape_004 a sh:NodeShape, ami:Shape ;
    ami:owner  ex:actor7 ;
    ami:steward  ex:actor7 ;
    
    rdfs:label  "nested boring" ;
    rdfs:comment  """
Nested but ultimately boring shape.
""" ;

    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];

    sh:property [
        sh:path ex:recentReviews ;
        sh:node [
            a sh:NodeShape ;
            sh:property [
                sh:path ex:zzoop ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [
                        sh:path ex:name ;
                        sh:datatype xsd:string ;
                    ] ;

            	    sh:property [
		        sh:path ex:flug ;
			sh:node [
			    a sh:NodeShape ;
			    sh:property [
			        sh:path ex:part1 ;
				sh:datatype xsd:string ;
			    ] ;
			    sh:property [
			        sh:path ex:part2 ;
				sh:datatype xsd:string ;
			    ] ;
   		        ] ;
                    ] ;
		    sh:property [
                        sh:path ex:last ;
                        sh:datatype xsd:string ;
                    ] ;
                ] ;
            ] ;
        ];
    ] .	 
