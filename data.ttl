#  Our instance namespace:
@prefix dd: <http://moschetti.org/buzz#> .

#  The namespace for predicates, classes, and properties bespoke
#  to my environment.  The ami: namespace is off-limits and it is
#  always a good idea to separate class and property defs from
#  actual instances of same.
@prefix exr: <http://moschetti.org/datarisk#> .
@prefix exc: <http://moschetti.org/compliance#> .

#  We depend on an external namespace of Software data!
@prefix xts: <http://xts.com/xts#> .


#  The foundation AMI namespace:
@prefix ami: <http://moschetti.org/ami#> .

#  Industry standards:
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

#
#  Actors can be real people or processes.
#  Processess do not have first and last names and such so we heavily depend on
#  the rdfs:label as the catch-all.
#
#  TBD:  Maybe Actors also need Item to pick up owner, steward, etc...
#

dd:actor1 a ami:Actor;
    rdfs:label "Steve Austin" ;
    rdfs:comment "Steve Austin" ;    
    ami:salary   "10.09"^^xsd:decimal ;	
    ami:DID "A123" ;
    ami:firstname "Steve" ;
    ami:lastname "Austin" .
    

dd:actor2 a ami:Actor;
    rdfs:label "Dave Spector" ;
    rdfs:comment "Dave Spector" ;    
    ami:DID "A456" ;
    ami:firstname "Dave" ;
    ami:lastname "Spector" .


dd:actorSys a ami:Actor;
    rdfs:label "System Daemon 7" ;
    rdfs:comment "System Daemon 7" ;    
    ami:DID "S7" .

dd:actor7 a ami:Actor;
    rdfs:label "Linda Shaw" ;
    rdfs:comment "Linda Shaw" ;    
    ami:DID "A86" ;
    ami:firstname "Linda" ;
    ami:lastname "Shaw" .

dd:actor9 a ami:Actor;
    rdfs:label "Druce Vertes" ;
    rdfs:comment "Druce Vertes" ;    
    ami:DID "A999" ;
    ami:firstname "Druce" ;
    ami:lastname "Vertes" .    

dd:actor10 a ami:Actor;
    rdfs:label "Jane Doe" ;
    rdfs:comment "Jane Doe" ;    
    ami:DID "B87" ;
    ami:firstname "Jane" ;
    ami:lastname "Doe" .

dd:actor44 a ami:Actor;
    rdfs:label "Marsha Brady" ;
    rdfs:comment "Marsha Brady" ;    
    ami:DID "X0098" ;
    ami:firstname "Marsha" ;
    ami:lastname "Brady" .

dd:actor55 a ami:Actor;
    rdfs:label "Robert Plant" ;
    rdfs:comment "Robert Plant" ;    
    ami:DID "X0298" ;
    ami:firstname "Robert" ;
    ami:lastname "Plant" .

dd:oraclecorp	    a ami:Vendor ;
		    ami:owner dd:actor44 ;
		    ami:LEI "C003" ;
		    rdfs:label "Oracle Corp" ;
		    rdfs:comment "The spawn of Larry Elison" .		    

dd:mscorp	    a ami:Vendor ;
		    ami:owner dd:actor44 ;
		    ami:LEI "C002" ;
		    rdfs:label "Microsoft Corp" ;
		    rdfs:comment "The spawn of Bill Gates" .

dd:internal	    a ami:Vendor ;
		    ami:owner dd:actor44 ;
		    rdfs:label "*internal development*" ;
		    rdfs:comment "All internal produced software" .


dd:mtech	    a ami:Vendor ;
		    ami:owner dd:actor44 ;
		    ami:LEI "C765" ;
		    rdfs:label "Moschetti LLC" ;
		    rdfs:comment "The spawn of Buzz" .
		    
dd:oss		    a ami:Vendor ;
		    ami:owner dd:actor55 ;
		    rdfs:label "open source" ;
		    rdfs:comment "Unspecified open source code" .
		    
dd:mongocorp	    a ami:Vendor ;
		    ami:owner dd:actor55 ;  # Robert Plant
		    ami:LEI "C265" ;
		    rdfs:label "MongoDB Inc" ;
		    rdfs:comment "The spawn of Dwight and Eliot" .
		    

dd:program1   a ami:Software ;
	      rdfs:label "report server";
	      ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];	      
	      ami:swtype	"service" ;
	      ami:linksWith	dd:lib1 ;
	      ami:slang "java" ;
	      ami:linksWith	dd:lib77 .

dd:program3   a ami:Software ;
	      rdfs:label "risk calculator";
	      ami:swtype	"service" ;	      
	      rdfs:comment """
Calculates credit risk for instrument types A and B.
""" ;
	      ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];	      
	      ami:slang "java" ;
	      ami:linksWith	dd:lib2 ;
	      ami:linksWith	dd:lib77 .

    
dd:software1 a ami:Software;
    rdfs:label "Oracle";
    rdfs:comment """
The Oracle database engine.
""";    

      ami:swtype	"service" ;
      ami:vendor dd:oraclecorp ;

      ami:version [ a ami:Version;
          ami:major 12; ami:minor 0;
	  ami:released "2018-01-01T00:00:00Z"^^xsd:dateTime ;      
	  ami:bintype "arm64"; ami:platform "macOS"
      ];

    ami:EOL "2023-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;    
    ami:owner dd:actor1 ;
    ami:steward dd:actor1 .

dd:mdbx a ami:Software;
    rdfs:label "MongoDB";
    rdfs:comment """
The MongoDB database engine.
""";    

     ami:slang "c++" ;
      ami:vendor dd:mongocorp ;
    ami:version [ a ami:Version;
        ami:major 7; ami:minor 0;
	ami:released "2022-01-01T00:00:00Z"^^xsd:dateTime ;	
        ami:bintype "arm64"; ami:platform "macOS"
    ];
    ami:EOL "2025-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    
    ami:swtype	"service" ;    
    ami:owner dd:actor1 ;
    ami:steward dd:actor1 .    


dd:pgdbx a ami:Software;
    rdfs:label "postgres";
    rdfs:comment """
The postgres database engine.
""";    

     ami:slang "c++" ;
      ami:vendor dd:mongocorp ;
    ami:version [ a ami:Version;
        ami:major 16; ami:minor 3;
	ami:released "2024-01-01T00:00:00Z"^^xsd:dateTime ;	
        ami:bintype "arm64"; ami:platform "macOS"
    ];
    ami:EOL "2028-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    
    ami:swtype	"service" ;    
    ami:owner dd:actor1 ;
    ami:steward dd:actor1 .    


dd:software2 a ami:Software;
    rdfs:label "java";
    ami:vendor dd:oraclecorp ;
    ami:version [ a ami:Version; ami:major 17; ami:minor 0; ami:patch 11;
      		  ami:released "2021-01-01T00:00:00Z"^^xsd:dateTime ;          
                  ami:bintype "arm64"; ami:platform "macOS" ];
    ami:EOL "2028-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
      ami:swtype	"exec" ;
      ami:owner dd:actor1 ;
    ami:steward dd:actor1.

dd:software22 a ami:Software;
    rdfs:label "java";
    ami:vendor dd:oraclecorp ;
      ami:swtype	"exec" ;    
    ami:version [ a ami:Version; ami:major 8; ami:minor 2; ami:patch 3;
      		  ami:released "2006-01-01T00:00:00Z"^^xsd:dateTime ;
                  ami:bintype "x86_64"; ami:platform "ubuntu" ];
    ami:EOL "2020-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    ami:owner dd:actor1 ;
    ami:steward dd:actor1.    


dd:software3 a ami:Software;
    rdfs:label "susynct";
    ami:vendor dd:mtech ;
      ami:swtype	"app" ;    
    ami:version [ a ami:Version;
         ami:major 1; ami:minor 0;
	 ami:released "2021-01-01T00:00:00Z"^^xsd:dateTime ;	 
	 ami:bintype "python"
	 ];
    ami:EOL "2027-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;

#    ami:corn "{\"key\": [\"foo\",12, {\"$numberDecimal\": \"12.09\"} ] }"^^dd:json  ;
     ami:slang "python" ;
     ami:owner dd:actor2 ;
    ami:steward dd:actor2 .


dd:software4 a ami:Software;
    rdfs:label "AMI";
      ami:swtype	"app" ;        
    ami:vendor dd:mtech ;
    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "python" ];
    ami:EOL "2026-01-01T00:00:00Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
    ami:steward dd:actor2 ;
    ami:owner dd:actor2 .    

dd:lib1	a		ami:Software ;
	rdfs:label "google-guava";
	rdfs:comment """
Guava is a set of core Java libraries from Google that includes new collection types (such as multimap and multiset), immutable collections, a graph library, and utilities for concurrency, I/O, hashing, primitives, strings, and more.
""" ;
	ami:version [ a ami:Version; ami:major 7; ami:minor 6; ami:bintype "jar" ];	
      ami:swtype	"lib" ;    
      ami:steward dd:actor2 ;
	ami:owner dd:actor2 ;
      ami:slang "java" ;
	ami:vendor	dd:oss ;
	ami:EOL		"2024-08-02T14:00:57.478Z"^^xsd:dateTime .

    
dd:lib2	a		ami:Software ;
	rdfs:label "common-collections";
	ami:version [ a ami:Version; ami:major 22; ami:minor 1; ami:bintype "jar" ];
      ami:swtype	"lib" ;
      ami:steward dd:actor2 ;
	ami:owner dd:actor2 ;
      ami:slang "java" ;	
	ami:vendor	dd:oss ;
        ami:linksWith	dd:lib4 ;	
	ami:EOL		"2026-08-02T14:00:57.478Z"^^xsd:dateTime .

dd:lib3	a		ami:Software ;
	ami:version [ a ami:Version;
		    ami:major 1; ami:minor 0; ami:patch 0;
		    ami:bintype "jar" ;
		    ami:released "2007-01-01T00:00:00Z"^^xsd:dateTime ;	 		    
		    ];
		    
	rdfs:label "log4j";
	rdfs:comment "Extremely popular logging framework for Java" ;	
      ami:swtype	"lib" ;
      ami:steward dd:actor2 ;
	ami:owner dd:actor44 ;		
      ami:slang "java" ;
      ami:vendor	dd:oss ;
	ami:EOL		"2026-02-01T12:00:00.000Z"^^xsd:dateTime .

dd:lib4	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 2; ami:minor 8; ami:bintype "jar" ];
	rdfs:label "log4j";
	rdfs:comment "Extremely popular logging framework for Java" ;		
      ami:swtype	"lib" ;
      ami:steward dd:actor9 ;
	ami:owner dd:actor44 ;
      ami:slang "java" ;

      ami:linksWith	xts:slf4j ; # ah... external ref!

	ami:vendor	dd:oss ;
	ami:EOL		"2027-02-01T12:00:00.000Z"^^xsd:dateTime .


dd:bson1	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 4; ami:minor 9; ami:bintype "jar" ];
	rdfs:label "bson";
	rdfs:comment "BSON SDK for Java" ;		
      ami:swtype	"lib" ;
      ami:steward dd:actor9 ;
	ami:owner dd:actor44 ;
      ami:slang "java" ;

      ami:linksWith	xts:slf4j ; # ah... external ref!

	ami:vendor	dd:mongocorp ;
	ami:EOL		"2028-02-01T12:00:00.000Z"^^xsd:dateTime .


dd:bson2	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 3; ami:minor 11; ami:bintype "jar" ];
	rdfs:label "bson";
	rdfs:comment "BSON SDK for Java" ;		
      ami:swtype	"lib" ;
      ami:steward dd:actor9 ;
	ami:owner dd:actor44 ;  # Marsha
      ami:slang "java" ;

      ami:linksWith	xts:slf4j , xts:slf4japi, xts:a35e ;

	ami:vendor	dd:mongocorp ;
	ami:EOL		"2020-02-01T12:00:00.000Z"^^xsd:dateTime .




dd:lib77	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 5; ami:minor 7; ami:bintype "jar" ];
	rdfs:label "jackson";
	rdfs:comment "Extremely popular XML parser for Java" ;		
      ami:swtype	"lib" ;
      ami:owner dd:actor9 ;
	ami:steward dd:actor9 ;	
      ami:slang "java" ;
      ami:linksWith	dd:lib88 ;
	ami:EOL		"2027-02-01T12:00:00.000Z"^^xsd:dateTime .	

dd:lib88	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 2; ami:minor 2; ami:bintype "jar" ];
	rdfs:label "jackson-bind";
      ami:swtype	"lib" ;
      ami:owner dd:actor9 ;
      ami:slang "java" ;
      ami:steward dd:actor9 ;		
	ami:linksWith	dd:libMongo1 .

dd:libMongo1	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 4; ami:minor 9; ami:bintype "jar" ];
	rdfs:label "mongodb client SDK";
      ami:swtype	"lib" ;
      ami:owner dd:actor9 ;
      ami:steward dd:actor9 ;		
      ami:slang "java" ;
	ami:vendor	dd:mongocorp ;		
	rdfs:comment """
The MongoDB Java client side SDK.
""" .    		

dd:libpg1	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 16; ami:minor 0; ami:bintype "jar" ];
	rdfs:label "postgres client SDK";
      ami:swtype	"lib" ;    	
	ami:owner dd:actor9 ;
	ami:steward dd:actor9 ;
      ami:slang "java" ;
	ami:vendor	dd:oss ;		
	rdfs:comment """
The Postgres Java client side SDK.
""" .

dd:jpg4	a		ami:Software ;
	ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];
	rdfs:label "JPEG SDK";
      ami:swtype	"lib" ;    	
	ami:owner dd:actor9 ;
	ami:steward dd:actor9 ;		
      ami:slang "java" ;	
	ami:vendor	dd:oss ;		
	rdfs:comment """
A JPG/JPEG graphics generation library.
""" .    		

# dd:sw001	a		ami:Software ;
# 		ami:linksWith	dd:sw003 .

# dd:sw002	a		ami:Software ;
# 		ami:linksWith	dd:sw003 .

# dd:sw003	a		ami:Software ;
# 		ami:linksWith	dd:sw004 , dd:sw006 .

# dd:sw004	a		ami:Software ;
# 		ami:linksWith	dd:sw005 .

# dd:sw005	a		ami:Software ;

# dd:sw006	a		ami:Software ;


dd:sw001	dd:linksWith	dd:sw003 .
dd:sw002	dd:linksWith	dd:sw003 .
dd:sw003	dd:linksWith	dd:sw004 , dd:sw006 .
dd:sw004	dd:linksWith	dd:sw005 .




dd:vm1	a		ami:Hardware ;
	ami:steward dd:actor7 ;
	ami:owner dd:actor7 ;	
	ami:vendor	dd:mscorp ;
	ami:vmtype	"Standard_D2" .


dd:vm2	a		ami:Hardware ;
	ami:steward dd:actor7 ;
	ami:owner dd:actor7 ;	
	ami:vmtype	"Standard_D2" ;

	# Just like in AWS:
	ami:secgroup	dd:sg456 ;

	# Could also make it a blank node:
	ami:secgroup	[
		ami:protocol	"TCP" ;
		ami:port	8080;
	] ;

	ami:vendor	dd:mscorp .


#
#  Components tie together as a logical representation of a system
#

dd:myApp     a    ami:Component ;
	     	ami:owner dd:actor1 ;
		ami:steward dd:actor1 ;
		rdfs:label "myApp" ;
		rdfs:comment """
myApp is used by the risk department to do fancy things.""" ;
	     ami:connectsTo    dd:service1 .
	     
dd:myApp2    a    ami:Component ;
	      	ami:owner dd:actor1 ;
	      	ami:steward dd:actor1 ;
		rdfs:label "myApp2" ;
		rdfs:comment """
myApp2 blends frogs and pencil eraser dust into a delicacy.""" ;		
	     ami:connectsTo    dd:service7 .


dd:service1	a    ami:Component ;
	     	ami:owner dd:actor1 ;
	     	ami:steward dd:actor1 ;
		rdfs:label "risk service" ;
		rdfs:comment """
The risk service takes in requests to calculate things and returns the
results.  It uses live market data.""" ;

		ami:entryPoint	dd:program3 ;
		
		ami:listensFor	[
		  ami:protocol 	ami:https ;
		  ami:auth 	ami:basic ;		
		  ami:mep    [
		        a ami:MEP ;
			ami:shapeIn  dd:shape1 ;
			ami:shapeOut dd:myShape_003 ;			
			] ;
		  ami:mep    [
		        a ami:MEP ;		  
			ami:shapeIn  dd:shape3 ;
			ami:shapeOut dd:shape4 ;			
			] ;
		] ;
		ami:connectsTo  dd:service2 .

dd:service7	a    ami:Component ;
	     	ami:owner dd:actor9 ;
	     	ami:steward dd:actor9 ;		
		ami:connectsTo    dd:db2 ;
		ami:listensFor	[
		  ami:mep    [
		        a ami:MEP ;		  
			ami:shapeIn  dd:myShape_001 ;
			ami:shapeOut dd:shape2 ;			
			]
		] .


#dd:service1  ami:connectsTo    dd:service2 .

dd:service2  a    ami:Component ;
	     	ami:owner dd:actor1 ;
	     	ami:steward dd:actor1 ;
		rdfs:label "instrument data service" ;
		rdfs:comment """
The instrument data service takes CUSIP, SEDOL, ISIN, BB, and GCID keys
and returns richly structured data.""" ;

		ami:entryPoint	dd:program2 ;
		
		ami:connectsTo    dd:service3 ;
		ami:connectsTo    dd:db1 ;
		ami:connectsTo    dd:db3 .		

dd:service3  a    ami:Component ;
	     	ami:owner dd:actor1 ;
	     	ami:steward dd:actor1 ;
		rdfs:label "structured products data service" ;
		rdfs:comment """
The structured products service takes GCID keys
and returns richly structured data for exotic structures.""" ;				
	     ami:connectsTo    dd:db2 .


dd:db1	       a    ami:Component ;
	     	ami:owner dd:actor7 ;
	     	ami:steward dd:actor7 ;

	     	ami:entryPoint dd:software1 ;   # Oracle!
		
		rdfs:label "cash instrument database" ;
		rdfs:comment """
A database that holds cash instrument data like equities and bonds.""" .


dd:db2	       a    ami:Component ;
	     	ami:owner dd:actor7 ;
	     	ami:steward dd:actor7 ;
		rdfs:label "exotics database" ;

	     	ami:entryPoint dd:software1 ;   # Oracle!
		
		#  Ah...  For databases we don't use a MEP because the
		#  inbound is too wide open -- but we CAN expose
		#  tables and collections as output!
		ami:listensFor	[
		  ami:protocol 	ami:proprietary ;
		  ami:auth 	ami:basic ;		
		  ami:shapeOut  dd:coll1, dd:coll2 ;
		] ;
			
		rdfs:comment """
A database optimized for storing richly structured data.""" .




dd:db3	       a    ami:Component ;
	     	ami:owner dd:actor7 ;
	     	ami:steward dd:actor7 ;
		ami:entryPoint dd:mdbx ;
		
		rdfs:label "portfolio database" ;
		rdfs:comment """
Global repo of position data.""" .


dd:db4	       a    ami:Component ;
	     	ami:owner dd:actor7 ;
	     	ami:steward dd:actor7 ;
		rdfs:label "compliance limits database" ;
		rdfs:comment """
Tracks current and historic thresholds and setting used to drive risk systems.""" .



dd:otherApp  a    ami:Component ;
	     	ami:owner dd:actor10 ;
	     	ami:steward dd:actor10 ;
	     ami:entryPoint	dd:program8 ;
	      rdfs:label "Vacation System" ;
	      rdfs:comment """	      
Legacy mainframe program to track ONLY employee vacation time allotted and
consumed.
""" .

dd:serviceX  a    ami:Component ;
	     ami:connectsTo    dd:db2 .




dd:program2   a ami:Software ;
		ami:steward dd:actor9 ;
		ami:owner dd:actor9 ;
	ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:bintype "jar" ];
      ami:swtype	"service" ;    	
	      rdfs:label "graphics server";

	      ami:linksWith	dd:lib2 ;
	      rdfs:comment """	      
A web service to generate a variety of line, bar, and pie graphs in JPG, PNG, or
PDF formats.  The purpose is to free programs from the sometimes complex and
burdensome task of importing or linking with a multitude of graphics generation
libraries, at the expense of performance due to data transmission over the network.
""" .


dd:program8   a ami:Software ;
		ami:steward dd:actor10 ;
		ami:owner dd:actor10 ;
	ami:version [ a ami:Version; ami:major 23; ami:minor 9; ami:bintype "x390" ];
      ami:swtype	"app" ;    	
	      ami:slang "cobol" ;
	      rdfs:label "HR Vacation system";
	      rdfs:comment """
Strict x3270 emulation required.  Was part of series of COBOL programs that
avoided link issues by build all dependencies into a single compilable and
releasable unit hence it has no links.
""" .    				



dd:foosvr   a ami:Software ;
	      rdfs:label "foo server";
            ami:swtype	"service" ;    		      
	      ami:linksWith	dd:lib3 .	      


#
#   SYSTEMS
#
dd:system_001	a	ami:System ;
		ami:owner dd:actor9 ;
		ami:steward dd:actor9 ;
		ami:macrotype "distributed" ;		
		rdfs:label "Bond System";
			ami:dept	"ABC" ;
		ami:components  dd:myApp ;
		rdfs:comment """
User application to create and manage bonds.
""" .    		

dd:system_002	a	ami:System ;
		rdfs:label "Bond System (full)";
		ami:owner dd:actor9 ;
		ami:steward dd:actor9 ;
		ami:macrotype "distributed" ;				
		ami:dept	"ABC" ;
		ami:components  dd:myApp, dd:myApp2 ;
		rdfs:comment """
All applications relating to the Bond System.
""" .    				

dd:system_003	a	ami:System ;
		rdfs:label "Vacation System";
		ami:owner dd:actor10 ;
		ami:steward dd:actor10 ;
		ami:macrotype "mainframe" ;
		ami:dept	"HR" ;
		ami:components  dd:otherApp ;
	      rdfs:comment """	      
Legacy mainframe program to track ONLY employee vacation time allotted and
consumed.  
""" .


#
#  Instances are actual running things:
#
dd:foosvr_001	a	ami:Instance ;
		ami:program	     dd:foosvr ;
		ami:pid		     73645 ;
		ami:host	     "machine1" .


#  Reports:   For the future...
dd:rpt3		a	ami:Report ;
		ami:owner dd:actor55 ;  
		ami:steward dd:actor55 ;
		rdfs:label "report" ;
		rdfs:comment """This report
shows the software that has the smallest amount of time from when
it is released to when it is declared EOL. """ ;
		
		ami:sparql	     """
SELECT ?software ?released ?eol (?eol - ?released)
WHERE {
    ?software a ami:Software ;
    	      ami:EOL  ?eol ;
    	      ami:version ?vers .

    ?vers     ami:released	?released ;
}
ORDER BY DESC(?eol - ?released)
LIMIT 3
""" .




dd:myShape_001 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;

    rdfs:label  "instrument" ;
    rdfs:comment  """
Describes a polymorphic instrument shape.
""" ;

    exc:bcbs239 [ a exc:Bcbs239; exc:attested_by dd:actor1 ] ;
    
    sh:property [
        sh:path dd:amt ;
        sh:datatype xsd:integer ;
    ] ;
    
    sh:property [
        sh:path dd:recentReviews ;
        sh:node [
            a sh:NodeShape ;
            sh:property [
                sh:path dd:text ;
                sh:datatype xsd:string ;
            ] ;
            sh:property [
                sh:path dd:reviewerName ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [
                        sh:path dd:first ;
                        sh:datatype xsd:string ;
			dd:sensitivity  2  ;
			rdfs:comment  "a deeper nested comment"
		    ] ;
                    sh:property [
                        sh:path dd:last ;
                        sh:datatype xsd:string ;
                    ] ;
                ] ;
            ] ;
            sh:property [
                sh:path dd:reviewerID ;
                sh:datatype xsd:string ;
                sh:pattern "^[\\w._%+-]+@[\\w.-]+\\.[a-zA-Z]{2,}$" ;  # Email format pattern
            ] ;
            sh:property [
                sh:path dd:reviewerPhone ;
                sh:datatype xsd:string ;
                sh:pattern "^(\\+\\d{1,3}[- ]?)?\\d{10}$" ;  # Simple phone number pattern
            ] ;
            sh:property [
                sh:path dd:reviewDate ;
                sh:datatype xsd:dateTime ;
		rdfs:comment  "date of review submission maybe not actual review" ;
            ] ;
        ] ;
    ] .


dd:myShape_002 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;

    rdfs:label  "user info" ;
    rdfs:comment  """
Digital ID plus SSN.
""" ;

    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];
    
    sh:property [
        sh:path dd:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path dd:SSN ;
        sh:datatype xsd:string ;
    ] .


dd:coll1 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;

    rdfs:label  "defaults" ;
    rdfs:comment  """
Defaults table.
""" ;

    sh:property [
        sh:path dd:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path dd:updated ;
        sh:datatype xsd:dateTime ;
    ] .


dd:coll2 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;

    rdfs:label  "results" ;
    rdfs:comment  """
Results table holding various things that were calculated.
""" ;

    sh:property [
        sh:path dd:id ;
        sh:datatype xsd:string ;
    ] ;

    sh:property [
        sh:path dd:value ;
        sh:datatype xsd:string ;
	rdfs:comment  """
Value is stored as string due to legacy issues with floating point precision.""" ;
    ] .




dd:myShape_003 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;    
    rdfs:label  "boring" ;
    rdfs:comment  """
A boring shape.
""" ;
    
    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];
    
    sh:property [
        sh:path dd:corn ;
        sh:datatype xsd:string ;
	dd:sensitivity 3
    ] .


dd:myShape_004 a sh:NodeShape, ami:Shape ;
    ami:owner  dd:actor7 ;
    ami:steward  dd:actor7 ;
    
    rdfs:label  "nested boring" ;
    rdfs:comment  """
Nested but ultimately boring shape.
""" ;

    ami:version [ a ami:Version; ami:major 1; ami:minor 0; ami:patch 0 ];

    sh:property [
        sh:path dd:recentReviews ;
        sh:node [
            a sh:NodeShape ;
            sh:property [
                sh:path dd:zzoop ;
                sh:node [
                    a sh:NodeShape ;
                    sh:property [
                        sh:path dd:name ;
                        sh:datatype xsd:string ;
                    ] ;

            	    sh:property [
		        sh:path dd:flug ;
			sh:node [
			    a sh:NodeShape ;
			    sh:property [
			        sh:path dd:part1 ;
				sh:datatype xsd:string ;
			    ] ;
			    sh:property [
			        sh:path dd:part2 ;
				sh:datatype xsd:string ;
			    ] ;
   		        ] ;
                    ] ;
		    sh:property [
                        sh:path dd:last ;
                        sh:datatype xsd:string ;
                    ] ;
                ] ;
            ] ;
        ];
    ] .	 
