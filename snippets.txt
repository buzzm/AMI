* Get version of software

Version itself is a class and not particularly useful to me.
If you intend to return a Version class, please expand to include its components
as follows.   Note that version MUST contain a "major" number but properties
"minor", "patch", and "bintype" are optional:

SELECT ?major ?minor ?patch ?btype ?released
WHERE {
    BIND(ex:exampleInstance AS ?software)  

    ?software ami:version ?version .

    ?version ami:major ?major .
    OPTIONAL { ?version ami:minor ?minor }
    OPTIONAL { ?version ami:patch ?patch }
    OPTIONAL { ?version ami:bintype ?btype }
    OPTIONAL { ?version ami:released ?released }        
}

----

* Get all software of a certain bintype or binary type

SELECT ?software
WHERE {
    ?software a ami:Software ;
              ami:version ?version .
    ?version ami:bintype "jar" ;
}

====

* Get name of vendor

To find a vendor given a name, canonicalize the label to lowercase
and use CONTAINS to find it anywhere in the name.  This may
yield more than 1 vendor e.g. "Oracle USA" and "Oracle EU" but
that is OK:

SELECT DISTINCT ?vendor ?vendorLabel
WHERE {
      ?software a ami:Software ;
              ami:vendor ?vendor .
     ?vendor rdfs:label ?vendorLabel .
     FILTER(CONTAINS(LCASE(?vendorLabel), "exampleVendorName")) .
}

----

* Get all software for a vendor
* List all software for a vendor

To find a vendor given a name, canonicalize the label to lowercase
and use CONTAINS to find it anywhere in the name.  This may
yield more than 1 vendor e.g. "Oracle USA" and "Oracle EU" but
that is OK.  

SELECT ?vendorLabel ?software ?desc
WHERE {
     ?software a ami:Software ;
              ami:vendor ?vendor .
     ?vendor rdfs:label ?vendorLabel .
     
     FILTER(CONTAINS(LCASE(?vendorLabel), "exampleVendorName")) .

     ?software 	ami:vendor	?vendor .

     # Remember: rdfs:comment is not required so if not present
     # do not filter out the result!
     OPTIONAL { ?software rdfs:comment    ?desc }
}

====

* Get all component dependencies recursively for a given system
* Get all component dependencies recursively for a given component
* Get all components for a system

This SPARQL takes full advantage of the '+' operator that instructs the
query engine to recursively follow the ami:connectsTo property from
component instance to instance.
It is a downstream dependency lookup.

SELECT DISTINCT ?start ?end
WHERE {
    # Get all top-level components declares for ex:exampleSystemInstance:
    ex:exampleSystemInstance ami:components  ?components .

    # .. Or just directly bind a component e.g.:
    #  BIND(dd:exampleComponentInstance as ?components)
  {  
    ?components ami:connectsTo ?end .
    BIND(?components AS ?start)
  } UNION {
    #  Note: In this block, ?start and ?end are both unbound so
    #  lots of material gets picked up here...
    ?start ami:connectsTo ?end . 
    ?components ami:connectsTo+ ?start .
  }

}

----

* Given a component, get all upstream components
* Get all upstream component dependencies recursively

This SPARQL takes full advantage of the '+' operator that instructs the
query engine to recursively follow the ami:connectsTo property from instance
to instance.
It is an upstream dependency lookup.

SELECT DISTINCT  ?start ?end
WHERE {
    BIND(ex:exampleComponentInstance AS ?components)

    {
      ?start ami:connectsTo ?components .
       BIND(?components AS ?end)
    }
    UNION
    {
      ?start ami:connectsTo ?intermediate .
      ?intermediate ami:connectsTo+ ?components .
      BIND(?intermediate AS ?end)
    }
}

----

* Given a component, find all systems that use it
* Get all systems that, through dependency traversal, use a component

This SPARQL takes full advantage of the '+' operator that instructs the
query engine to recursively follow the ami:connectsTo property from instance
to instance.
It is an upstream dependency lookup.

SELECT  ?components ?label ?dept ?desc 
WHERE {
    BIND(ex:exampleComponentInstance AS ?components)

    {
      ?start ami:connectsTo ?components .
       BIND(?components AS ?end)
    }
    UNION
    {
      ?start ami:connectsTo ?intermediate .
      ?intermediate ami:connectsTo+ ?components .
      BIND(?intermediate AS ?end)
    }

    ?system	ami:components  ?start .

    # System object is not useful to return so get important
    # properties and return those:
    ?system	rdfs:label ?label ;
    	        rdfs:comment ?desc ;
    	        ami:dept ?dept .
}

----

* Find all components that are *not* part of any system
* Find orphaned components

This SPARQL will find any Component that has no transitive connection
to a system definition.  This is not necessarily a fault, but in general
such unused components should be pruned from the AMI database.

SELECT ?component
WHERE {
  #  Get ALL components:
  ?component a ami:Component .
  
  # Step 2: Filter out components that are part of any system (directly or transitively)
  FILTER NOT EXISTS {
    ?system a ami:System ;
            ami:components ?initialComponent .
    ?initialComponent (ami:connectsTo)* ?connectedComponent .
    
    # Exclude components that are part of the transitive closure from any system
    FILTER (?connectedComponent = ?component)
  }
}

----

* Find all components
* List all components

SELECT ?label ?desc
WHERE {
    ?components a ami:Component .
    ?components rdfs:label ?label ;
    		rdfs:comment ?desc .
}


====
    
* Get all software that depends on a given piece of software
* Get all upstream dependencies of a given piece of software

This is an IMPORTANT snippet because it show us our overall exposure
to a particular piece of software.

This SPARQL takes full advantage of the '+' operator that instructs the
query engine to recursively follow the ami:linkWith property from instance
to instance.
It is an upstream dependency lookup.

SELECT DISTINCT ?start ?end
WHERE {
  # Bind variable ?sw to the target piece of software
  #     BIND(ex:exampleSoftwareInstance AS ?sw)
  # or perform a statement that populates `?sw` e.g.
  #     ?sw   a       ami:Software ;
  #           ami:EOL ?eol .
  #     FILTER (YEAR(?eol) = 2026)

  {
    ?start ami:linksWith ?sw .
    BIND(?sw AS ?end)
 }
 UNION
 {
    ?start ami:linksWith ?intermediate .
    ?intermediate ami:linksWith+ ?sw .
    BIND(?intermediate AS ?end)
 }
    
}

----

* Get all components that depend on a piece of software.
* What components depend on <some software description>?

This is an IMPORTANT and very useful snippet.  In almost 100% of the
cases, the expression "depends on" means *any* upstream dependency,
not just an immediate parent dependency.  This means 
we must first find *all* upstream recursive dependencies of software
and only then check to see if any components declare any one of
them to be an ami:entryPoint property.

SELECT DISTINCT ?start ?end ?components
WHERE {
  # Bind variable ?sw to the target piece of software
  BIND(ex:exampleSoftwareInstance AS ?sw)

# or perform a statement that populates `?sw` e.g.
#       ?sw   a       ami:Software ;
#	      ami:EOL ?eol .
#       FILTER (YEAR(?eol) = 2026)

  {
    ?start ami:linksWith ?sw .
    BIND(?sw AS ?end)
 }
 UNION
 {
    ?start ami:linksWith ?intermediate .
    ?intermediate ami:linksWith+ ?sw .
    BIND(?intermediate AS ?end)
 }

 # "Rows" of ?start now have the upstream dependency graph.
 # Simply find components where ami:entryPoint is a match!
  ?components ami:entryPoint ?start .
}

----

* Get all systems that depend on a piece of software.

This is an IMPORTANT snippet as it associates a piece of software with
the administrative context that consumes it.  When inquiring about
software, the first step is often to identify what systems use
the software, then proceed to explore the underlying components.

SELECT DISTINCT ?system ?dept ?desc
WHERE {
    # Use rdfs:label as general purpose filter.  Clearly it is
    # best to use shorter "exampleSoftwareName" to match more items.
    ?software a ami:Software ;
              rdfs:label ?swLabel .
    FILTER(CONTAINS(LCASE(?swLabel), "exampleSoftwareName"))

    # Find all upstream dependencies of the software
    {
        ?start ami:linksWith ?software .
        BIND(?software AS ?end)
    } UNION {
        ?start ami:linksWith ?intermediate .
        ?intermediate ami:linksWith+ ?software .
        BIND(?intermediate AS ?end)
    }

    # Find components that use any of the upstream dependencies as an entry point
    ?components ami:entryPoint ?start .

    # Find upstream dependencies of these components:
    {
      ?ss2 ami:connectsTo ?components .
       BIND(?components AS ?ee2)
    }
    UNION
    {
      ?ss2 ami:connectsTo ?intermediate .
      ?intermediate ami:connectsTo+ ?components .
      BIND(?intermediate AS ?ee2)
    }

    # Find systems having 1 or more components from ?ss2:
    ?system ami:components ?ss2 .

    # Retrieve important properties of the system
    ?system rdfs:label ?label ;
            rdfs:comment ?desc ;
            ami:dept ?dept .
}

====

* Get owner and/or steward names for <something>
* Who is responsible for <something>
* Who manages <something>

Questions will often not be specific about whether they seek the
ami:owner name or the ami:steward name.  Although technically both
are required properties for virtually every AMI type, sometimes one or both
might be missing.  Also, the owner and steward object instances are not as
immediately useful as the common names so we will extract them.

SELECT ?ownerName ?stewardName
WHERE {
      BIND(ex:exampleInstance AS ?item)

      OPTIONAL {
            ?item ami:owner ?owner .
	    ?owner rdfs:label ?ownerName .
	    }

      OPTIONAL {
            ?item ami:steward ?steward .
	    ?steward rdfs:label ?stewardName .
	    }	    	   
}

====

* Find all shapes that contain sensitive data


SELECT DISTINCT ?shape
WHERE {
    # Step 1: Get ex:sensitivity from any triple, if it exists:
    ?sensitiveProperty sh:path ?path ;
                       ex:sensitivity ?sensitivityValue .
    
    #  FILTER by desired level of sensitivity.
    #  ADJUST THIS AS NEEDED:
    FILTER(?sensitivityValue > 1 && ?sensitivityValue < 4)

    # Step 2: Trace back to the root shape
    ?intermediateShape (sh:property|sh:node)* ?sensitiveProperty .

    # Only pick classes that are actually top-level AMI Shape.  Note
    # that all the subfields are type sh:NodeShape but they are NOT
    # ami:Shape!
    ?shape sh:property ?intermediateShape ;
           a ami:Shape .
}

----

* Find all components that use shapes containing sensitive data in their MEPs

SELECT DISTINCT ?component ?mep ?shape
WHERE {
    # Step 1: Identify any property with ex:sensitivity > 2 and < 4
    ?sensitiveProperty sh:path ?path ;
                       ex:sensitivity ?sensitivityValue .

    #  FILTER by desired level of sensitivity.
    #  ADJUST THIS AS NEEDED:    
    FILTER(?sensitivityValue > 1 && ?sensitivityValue < 4)

    # # Step 2: Trace back to the root shape
    ?intermediateShape (sh:property|sh:node)* ?sensitiveProperty .

    # Only pick classes that are actually top-level AMI Shape.  Note
    # that all the subfields are type sh:NodeShape but they are NOT
    # ami:Shape!
    ?shape sh:property ?intermediateShape ;
           a ami:Shape .

    # # Step 3: Find components related to these shapes:
    ?component ami:listensFor ?mepEntry .

    ?mepEntry ?mep ?mepShape .

    # # Check for shapeIn or shapeOut:
    {
         ?mepShape ami:shapeIn ?shape
    }
    UNION
    {
        ?mepShape ami:shapeOut ?shape
    }
}
