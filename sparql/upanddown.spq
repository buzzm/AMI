
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX sh: <http://www.w3.org/ns/shacl#>

# ami is the model, buzz is "my data"
# Make sure the ami5 collection _id = SCHEME has a prefixes entry
# that matches these!
PREFIX ami: <http://moschetti.org/ami#>
PREFIX ex: <http://moschetti.org/buzz#>


SELECT DISTINCT ?endOfLifeSoftware ?programs ?start ?end
WHERE {
  # Find software with EOL in 2026:
  ?endOfLifeSoftware a ami:Software ;
  		       ami:EOL ?eol .
  FILTER (YEAR(?eol) = 2026)

  # Neat!
  # FILTER (?eol < (NOW() + "P1Y"^^xsd:duration))

  #
  # Find implementations that link with the end-of-life software.
  # The ami:implements predicate is the juice here:
  #
  ?programs ami:linksWith ?endOfLifeSoftware ;
     	    ami:implements ?service .

  #  This is a clutch pipeline
  #  Given a ?service, it gets BOTH upstream and downstream dependencies.
  #  In short, given a service, it will return the full system topology!
  #

  #  UPSTREAM
  {
    ?start ami:connectsTo ?service .
    BIND(?service AS ?end)
  } UNION {
    ?start ami:connectsTo ?intermediate .
    ?intermediate ami:connectsTo+ ?service .
    BIND(?intermediate AS ?end)
  }
  #  DOWNSTREAM
  UNION {
    ?service ami:connectsTo ?end .
    BIND(?service AS ?start)
  } UNION {
    ?start ami:connectsTo ?end . 
    ?service ami:connectsTo+ ?start .
  }
}


