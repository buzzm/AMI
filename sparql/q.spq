
# ami is the model, buzz is "my data"
# Make sure the ami5 collection _id = SCHEME has a prefixes entry
# that matches these!
PREFIX ami: <http://moschetti.org/ami#>
PREFIX ex: <http://moschetti.org/buzz#>
PREFIX exc: <http://moschetti.org/compliance#>

PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX xts: <http://xts.com/xts#>

SELECT DISTINCT ?system ?dept ?desc
WHERE {
    # Find software with "log4j" in the label
    ?software a ami:Software ;
              rdfs:label ?swLabel .
    FILTER(CONTAINS(LCASE(?swLabel), "log4j"))

    # Find all upstream dependencies of the software
    {
        ?start ami:linksWith ?software .
        BIND(?software AS ?end)
    } UNION {
        ?start ami:linksWith ?intermediate .
        ?intermediate ami:linksWith+ ?software .
        BIND(?intermediate AS ?end)
    }

    # Find components that use any of the upstream dependencies as an entry point
    ?components ami:entryPoint ?start .

    {
      ?ss2 ami:connectsTo ?components .
       BIND(?components AS ?ee2)
    }
    UNION
    {
      ?ss2 ami:connectsTo ?intermediate .
      ?intermediate ami:connectsTo+ ?components .
      BIND(?intermediate AS ?ee2)
    }

    # # Find systems that contain these components
    ?system ami:components ?ss2 .

    # Retrieve important properties of the system
    ?system rdfs:label ?label ;
            rdfs:comment ?desc ;
            ami:dept ?dept .
}
