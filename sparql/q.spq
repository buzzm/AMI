PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

PREFIX sh: <http://www.w3.org/ns/shacl#>

# ami is the model, buzz is "my data"
# Make sure the ami5 collection _id = SCHEME has a prefixes entry
# that matches these!
PREFIX ami: <http://moschetti.org/ami#>
PREFIX ex: <http://moschetti.org/buzz#>
PREFIX exc: <http://moschetti.org/compliance#>

PREFIX sh: <http://www.w3.org/ns/shacl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>


SELECT DISTINCT ?start ?end ?components
WHERE {
  # Bind variable ?sw to the target piece of software
       BIND(ex:lib4 AS ?sw)

# or perform a statement that populates `?sw` e.g.
#       ?sw   a       ami:Software ;
#	      ami:EOL ?eol .
#       FILTER (YEAR(?eol) = 2026)

  {
    ?start ami:linksWith ?sw .
    BIND(?sw AS ?end)
 }
 UNION
 {
    ?start ami:linksWith ?intermediate .
    ?intermediate ami:linksWith+ ?sw .
    BIND(?intermediate AS ?end)
 }

 # "Rows" of ?start now have the upstream dependency graph.
 # Simply find components where ami:entryPoint is a match!
  ?components ami:entryPoint ?start .
}
