import React, { useState } from 'react';
import './App.css';

function App() {
    const targURL = "http://localhost:5001";
    
    const [input, setInput] = useState('');  
    const [leftBoxContent, setLeftBoxContent] = useState(''); 
    const [vars, setVars] = useState([]);    
    const [dataOutput, setDataOutput] = useState([]); 
    const [stashPrompt, setStashPrompt] = useState(false); 
    const [lastRmsg, setLastRmsg] = useState(null); 

    const handleSubmit = async () => {
        setLeftBoxContent(prev => `${prev}\n${input}`);
        try {
            const response = await fetch(targURL + '/sparql', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ question: input, systemSize: 'Simple' }),  
                credentials: 'include'
            });
            const data = await response.json();
            processResponse(data);
            setLastRmsg(data); 
        } catch (error) {
            setLeftBoxContent(prev => `${prev}\nError retrieving data.`);
        }
    };

    const processResponse = (rmsg) => {
        setLeftBoxContent(prev => `${prev}\n${rmsg.narrative}`);
        if (rmsg.vars.length > 0) {
            setVars(rmsg.vars);  
            setDataOutput(rmsg.data.length > 0 ? rmsg.data : []);
            setStashPrompt(true);  
        }
    };

    const handleStashResponse = async (answer) => {
        if (answer === 'yes' && lastRmsg) {
            try {
                const stashResponse = await fetch(targURL + '/stash', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(lastRmsg),
                    credentials: 'include'
                });
                const rmsg2 = await stashResponse.json();
                setLeftBoxContent(prev => `${prev}\n${rmsg2.narrative}`);
            } catch (error) {
                setLeftBoxContent(prev => `${prev}\nError stashing data.`);
            }
        }
        setStashPrompt(false);
    };

    const renderTable = () => (
        <table className="data-table">
            <thead>
                <tr>
                    {vars.map((header, index) => (
                        <th key={index}>{header}</th>
                    ))}
                </tr>
            </thead>
            <tbody>
                {dataOutput.length > 0 ? (
                    dataOutput.map((row, rowIndex) => (
                        <tr key={rowIndex}>
                            {vars.map((header, colIndex) => (
                                <td key={colIndex}>{row[header]}</td>
                            ))}
                        </tr>
                    ))
                ) : (
                    <tr>
                        <td colSpan={vars.length}>No data available</td>
                    </tr>
                )}
            </tbody>
        </table>
    );

    return (
        <div className="App">
            <div className="main-container">
                <div className="left-box">
                    <pre>{leftBoxContent}</pre>
                </div>
                <div className="right-box">
                    {renderTable()}
                </div>
            </div>

            <div className="input-container">
                <textarea
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    placeholder="Enter your query"
                    className="input-box"
                />
                <button onClick={handleSubmit} className="go-button">GO</button>
            </div>

            {stashPrompt && (
                <div className="stash-prompt">
                    <p>Do you want to stash the data?</p>
                    <button onClick={() => handleStashResponse('yes')}>Yes</button>
                    <button onClick={() => handleStashResponse('no')}>No</button>
                </div>
            )}
        </div>
    );
}

export default App;
